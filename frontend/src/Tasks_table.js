import React, { useState, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';  // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
import { ModuleRegistry, AllCommunityModule } from 'ag-grid-community';

// !!! –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã Quartz (Theming API)
import 'ag-grid-community/styles/ag-theme-quartz.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

import './custom-grid.css';  // –º–æ–π css
import translator from './labels_ru';  // –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –¥–ª—è ag-grid
ModuleRegistry.registerModules([AllCommunityModule]);


function Tasks_table({ onBack }) { 
  /* —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –≤—Å—ë, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë, –æ–ø–∏—Å—ã–≤–∞–µ—Ç, 
  –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å */

  const [tasks, setTasks] = useState([]);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const [showForm, setShowForm] = useState(false);  
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const [newTask, setNewTask] = useState({ task: '', col_1: '', col_2: '' });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–º—ã –º–µ–Ω—è–µ–º —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∏ useEffect —Ä–µ–∞–≥–∏—Ä—É–µ—Ç)
  const [refreshKey, setRefreshKey] = useState(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {   
      /*  –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –∫ –Ω–∞—à–µ–º—É backend, 
      –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞—ë—Ç JSON-—Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)*/  
      fetch('http://localhost:5001/api/tasks')  
      .then(response => response.json())      // –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç => –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ json 
      .then(data => { setTasks(data);  // 
      })  
      .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–∞–¥–∞—á:', error));
    }, [refreshKey]); // [] - –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ refreshKey —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–∫—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
    const handleInputChange = (e) => {
      const { name, value } = e.target;
      setNewTask(prev => ({ ...prev, [name]: value }));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    const handleSave = async () => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (trim() - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ)
      if (!newTask.task_name.trim())
        { alert('–í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!');
        return; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å 
      }

      try {
        const response = await fetch('http://127.0.0.1:5001/api/add_task', {
          method: 'POST', // –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          headers: {
            'Content-Type': 'application/json' //  –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ–º json
          }, body: JSON.stringify(newTask) // –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç newManager –≤ JSON‚Äë—Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        });

        if (!response.ok) {
          /* –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞.. response.ok ‚Äî –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
                          true –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 200‚Äì299.
                          false –µ—Å–ª–∏ —á—Ç–æ‚Äë—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400, 500)
          */
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        } else {
          console.log('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
          setShowForm(false);  // —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
          setNewTask({ task_name: '', col_1: '', col_2: '' }); // –æ—á–∏—â–∞–µ–º –ø–æ–ª—è
          setRefreshKey(old => old + 1); // –∏–∑–º–µ–Ω—è–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã useEffect —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      }
    };


    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è AG Grid
    // field - –ö–ª—é—á –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—Ü–∞)
    // editable - –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    // sortable	- –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    // filter -	–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä
    // resizable	–†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—è—Ç—å —à–∏—Ä–∏–Ω—É —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const columnDefs = [
      { headerName: '–ó–∞–¥–∞—á–∞', field: 'task_name', editable: true, sortable: true, resizable: true,
        valueSetter: (params) => {
          if (!params.newValue || !params.newValue.trim()) {
            alert('–ü–æ–ª–µ "–ó–∞–¥–∞—á–∞" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
            return false;
          }
          params.data.task_name = params.newValue;
          return true;
        },
        filter: false },  

        { headerName: '# 1', field: 'col_1', editable: true, sortable: false, filter: false, resizable: true },
        { headerName: '# 2', field: 'col_2', editable: true, sortable: false, filter: false, resizable: true },
        { headerName: '–î–µ–π—Å—Ç–≤–∏—è', editable: false, sortable: false, filter: false, resizable: true,
                       cellRenderer: (params) => (
                       <button onClick={() => handleDelete(params.data.id)}>‚ùå</button>
                     )
        }            
    ];

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    const handleDelete = async (id) => {
      if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) {
          return;
      }
      try {
        const response = await fetch(`http://127.0.0.1:5001/api/delete_task/${id}`, {
        method: 'DELETE'
      });
    
        if (response.ok) {
          console.log('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
          setRefreshKey(old => old + 1); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        } 
        else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        }
      } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error); }
    };


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏
    const handleCellValueChanged = async (event) => {
        const id = event.data.id;  // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏
        const updatedField = event.colDef.field;   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ –ø–æ–ª–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        const oldValue = event.oldValue;           // –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let newValue = event.newValue;  // –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—è

        if (newValue === null) {newValue = '';}

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ task_name –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
        if ((updatedField === 'task_name') && !newValue.trim()) {
          // –û—Ç–∫–∞—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∫ —Å—Ç–∞—Ä–æ–º—É
          event.node.setDataValue(updatedField, oldValue);

          // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —è—á–µ–π–∫—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          event.api.refreshCells({ rowNodes: [event.node] });

          return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        }
        try {
          // –î–µ–ª–∞–µ–º PATCH-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const response = await fetch(`http://127.0.0.1:5001/api/update_cell`, {
          method: 'PATCH',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ 
            table: 'tasks',
            field: updatedField,
            value: newValue,
            id: id
          })  
        });

        if (!response.ok) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'); }
        else { console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'); }
      } 
        catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error); }
    };



    // –†–µ–Ω–¥–µ—Ä
    return (
      <div>
        <h3>&nbsp;&nbsp;–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á</h3>
        <div style={{ display: 'flex', gap: '22px', alignItems: 'center' }}>
          <button onClick={onBack} style={{ fontSize: '22px', marginLeft: '10px'}}>üè†</button>
          <button onClick={() => setShowForm(true)} style={{ fontSize: '22px' }}>‚ûï</button>   
        </div>

        {/* –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ showForm=true) */}
        {showForm && (
          <div style={{ marginTop: '10px', marginBottom: '10px', marginLeft: '10px' }}>
            <input
              name="task_name"
              placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
              value={newTask.task_name || ''}
              onChange={handleInputChange}
            />  
            <input
              name="col_1"
              placeholder="# 1"
              value={newTask.col_1 || ''}
              onChange={handleInputChange}
            />
            <input
              name="col_2"
              placeholder="# 2"
              value={newTask.col_2 || ''}
              onChange={handleInputChange}
            />
            <button onClick={handleSave} style={{ marginRight: '10px' }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={() => setShowForm(false)}>–û—Ç–º–µ–Ω–∞</button>
          </div>
        )}






        {/* –¢–∞–±–ª–∏—Ü–∞ */}
        {/* rowData={tasks} - –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ */}
        {/*  columnDefs={columnDefs} - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–µ –º–∞—Å—Å–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫*/}
        <div className="ag-theme-quartz" style={{ height: 500, width: '100%' }}>
          <AgGridReact
              rowData={tasks}  
              columnDefs={columnDefs} 
              defaultColDef={{
                flex: 1,
                filter: true,
                sortable: true,
                resizable: true,
                editable: true
              }}
              localeText={translator}
              onCellValueChanged={handleCellValueChanged}
                                
          />
        </div>
      </div>          
    )
}
export default Tasks_table;